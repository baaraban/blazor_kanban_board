@using KanbanBoard.Services.Abstraction
@using KanbanBoard.Data.Entities
@using KanbanBoard.Data.DTO
@inject IModalService ModalService
@inject IUserService userService
@inject IItemService itemService

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager


<div class="job-edit">
    <div class="textual-edit">
        <span>Title:</span><textarea @bind="Item.Title" />
        <hr />
        <span>Description: </span><textarea @bind="Item.Description" />
        <hr />
    </div>
    <div class="user-dropdown">
        <span>Assignee:</span>
        <select @bind="Item.UserId">
            <option value="@NULL_PLACEHOLDER">---</option>
            @foreach (var user in users)
            {
                <option value=@user.UserId>@user.UserEmail</option>
            }
        </select>
    </div>
    <div class="submit-area">
        <button @onclick="UpdateItem">Update Item</button>
    </div>
</div>

@code {
    JobItem Item { get; set; }
    [ParameterAttribute] public int ItemId { get; set; }
    [ParameterAttribute] public ModalReference thisRef { get; set; }
    List<ViewUser> users;

    private HubConnection hubConnection;

    private const string NULL_PLACEHOLDER = "_NULL_";

    protected async override Task OnInitializedAsync()
    {
        Item = await this.itemService.GetJobItem(ItemId);
        users = await this.userService.GetAllUsers();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/boardHub"))
            .Build();

        hubConnection.On<int>("ItemUpdate", async (itemId) =>
        {
            this.Item = await this.itemService.GetJobItem(itemId);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task UpdateItem()
    {
        if (Item.UserId == NULL_PLACEHOLDER)
        {
            Item.UserId = null;
        }

        await this.itemService.UpdateJobItem(Item);
        await this.hubConnection.SendAsync("ItemUpdate", Item.Id);
        thisRef.Close(ModalResult.Ok<JobItem>(Item));
    }
}