@using KanbanBoard.Data.Entities
@using KanbanBoard.Services
@inject MainService service

    <div class="job-status">
        <div class="job-header">
            @if (!isEditingTitle)
            {
                <p @onclick="StartEditing">@JobColumn.Name <span class="oi oi-x" aria-hidden="true" @onclick="DeleteColumn" /></p>
            }
            else
            {
                <p><input class="create-column-input" type="text" @bind-value="JobColumn.Name" @onfocusout="FinishEditing" @onmouseout="FinishEditing"/></p>
            }
        </div>
        <ul class="dropzone @dropClass"
            ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);"
            @ondrop="HandleDrop"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave">

            @foreach (var job in this.JobColumn.JobItems.OrderBy(x => x.Place))
            {
                <JobItemComponent Item="job" />
            }
            <AddJobComponent ColumnsComponent="@this" />
        </ul>
    </div>

@code {

    [CascadingParameter] JobsBoardComponent Container { get; set; }
    [Parameter] public JobColumn JobColumn { get; set; }

    string dropClass = "";

    private void HandleDragEnter()
    {
        if (JobColumn.Id == Container.Dragged.JobColumnId) return;
        dropClass = "can-drop";
    }

    public async Task Renumerate()
    {
        var i = 0;
        foreach(var job in this.JobColumn.JobItems)
        {
            job.Place = i++;
            await this.service.UpdateJobItem(job);
        }
    }

    public async Task AddNewItemJobAsync(string Title, string Description)
    {
        var item = new JobItem
        {
            Title = Title,
            Description = Description,
            JobColumnId = this.JobColumn.Id,
            Place = this.JobColumn.JobItems.Count()
        };
        item = await service.AddItem(item);

        this.StateHasChanged();
    }
    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        await Container.UpdateJobAsync(JobColumn);
    }

    private async Task DeleteColumn()
    {
        await Container.DeleteColumn(JobColumn);
    }

    bool isEditingTitle;
    string preEditingValue;

    private void StartEditing()
    {
        isEditingTitle = true;
        preEditingValue = this.JobColumn.Name;
    }

    private async Task FinishEditing()
    {
        isEditingTitle = false;
        if(preEditingValue != this.JobColumn.Name)
        {
            await this.service.UpdateJobColumn(this.JobColumn);
        }
    }
}