@using KanbanBoard.Data.Entities
@using KanbanBoard.Services.Abstraction
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject IColumnService columnService
@inject IItemService itemService

<div class="job-status">
    <div class="job-header" draggable="true"
         ondragover="event.preventDefault();"
         ondragleave="event.preventDefault();"
         @ondragstart="HandleColumnStart"
         @ondragenter="HandleColumnEnter"
         @ondrop="HandleColumnDrop">
        @if (!isEditingTitle)
        {
            <p @onclick="StartEditing"> @JobColumn.Name <span class="oi oi-x" aria-hidden="true" @onclick="DeleteColumn" /></p>
        }
        else
        {
            <p><input class="create-column-input" type="text" @bind-value="JobColumn.Name" @onfocusout="FinishEditing" @onmouseout="FinishEditing" /></p>
        }
    </div>
    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var job in this.JobColumn.JobItems.OrderBy(x => x.Place))
        {
            <JobItemComponent Item="job" />
        }
        <AddJobComponent ColumnsComponent="@this" />
    </ul>
</div>

@code {

    [CascadingParameter] JobsBoardComponent Container { get; set; }
    [Parameter] public JobColumn JobColumn { get; set; }
    private HubConnection hubConnection;

    string dropClass = "";

    public async Task Renumerate()
    {
        var i = 0;
        foreach (var job in this.JobColumn.JobItems)
        {
            job.Place = i++;
            await this.itemService.UpdateJobItem(job);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/boardHub"))
            .Build();

        hubConnection.On<int>("ColumnUpdate", async (itemId) =>
        {
            if (itemId == this.JobColumn.Id)
            {
                this.JobColumn = await this.columnService.GetColumn(itemId);
                StateHasChanged();
            }
        });

        hubConnection.On<int, int>("ItemAdded", async (columnId, itemId) =>
        {
            if (columnId == this.JobColumn.Id)
            {
                if (this.JobColumn.JobItems.Any(x => x.Id == itemId)) { return; }
                var item = await this.itemService.GetJobItem(itemId);
                this.JobColumn.JobItems.Append(item);
                foreach (var it in this.JobColumn.JobItems)
                {
                    var newer = await this.itemService.GetJobItem(it.Id);
                    it.Place = newer.Place;
                    it.JobColumnId = newer.JobColumnId;
                }
                StateHasChanged();
            }
        });

        hubConnection.On<int, int>("ItemDeleted", async (columnId, itemId) =>
        {
            if (columnId == this.JobColumn.Id)
            {
                var item = this.JobColumn.JobItems.FirstOrDefault(x => x.Id == itemId);
                if (item == null)
                {
                    return;
                }
                this.JobColumn.JobItems.Remove(item);
                foreach (var it in this.JobColumn.JobItems)
                {
                    var newer = await this.itemService.GetJobItem(it.Id);
                    it.Place = newer.Place;
                    it.JobColumnId = newer.JobColumnId;
                }
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    public async Task AddNewItemJobAsync(string Title, string Description)
    {
        var item = new JobItem
        {
            Title = Title,
            Description = Description,
            JobColumnId = this.JobColumn.Id,
            Place = this.JobColumn.JobItems.Count()
        };
        item = await this.itemService.AddItem(item);

        await this.hubConnection.SendAsync("ItemAdded", this.JobColumn.Id, item.Id);

        this.StateHasChanged();
    }
    private void HandleDragLeave()
    {
        if (Container.Dragged == null) { return; }
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        if (Container.Dragged == null) { return; }
        dropClass = "";
        await Container.UpdateJobAsync(JobColumn);
    }

    private void HandleDragEnter()
    {
        if (Container.Dragged == null) { return; }
        if (JobColumn.Id == Container.Dragged.JobColumnId) return;
        dropClass = "can-drop";
    }

    private async Task DeleteColumn()
    {
        await Container.DeleteColumn(JobColumn);
    }

    private async Task HandleColumnDrop()
    {
        await this.Container.HandleSwap(this.Container.DraggedColumn, this.Container.DraggedOverColumn);
    }

    private void HandleColumnStart()
    {
        this.Container.DraggedColumn = this.JobColumn;
    }

    private void HandleColumnEnter()
    {
        this.Container.DraggedOverColumn = this.JobColumn;
    }

    bool isEditingTitle;
    string preEditingValue;

    private void StartEditing()
    {
        isEditingTitle = true;
        preEditingValue = this.JobColumn.Name;
    }

    private async Task FinishEditing()
    {
        isEditingTitle = false;
        if (preEditingValue != this.JobColumn.Name)
        {
            await this.columnService.UpdateJobColumn(this.JobColumn);
            await this.hubConnection.SendAsync("ColumnUpdate", this.JobColumn.Id);
        }
    }
}