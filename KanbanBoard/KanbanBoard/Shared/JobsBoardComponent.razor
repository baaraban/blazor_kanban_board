@using KanbanBoard.Services
@inject MainService service
@inject IJSRuntime JsRuntime

@using KanbanBoard.Data.Entities

<div class="jobs-board">
    <CascadingValue Value="this">
        @foreach (var col in Columns)
        {
            <JobsColumnComponent JobColumn="@col" />
        }
        <AddColumnComponent />
    </CascadingValue>
</div>

@code {
    [Parameter] public List<JobColumn> Columns { get; set; }

    [Parameter] public EventCallback<JobItem> OnStatusUpdated { get; set; }

    public JobItem Dragged { get; set; }
    public JobItem DraggedOver { get; set; }


    public void Renumerate(JobColumn column)
    {
        var i = 0;
        foreach (var job in column.JobItems)
        {
            job.Place = i++;
        }
    }

    private async Task HandleSwap(JobItem from, JobItem to)
    {
        var swap = from.Place;
        from.Place = to.Place;
        to.Place = swap;

        await this.service.UpdateJobItem(from);
        await this.service.UpdateJobItem(to);
        this.StateHasChanged();
    }

    public async Task UpdateJobAsync(JobColumn newStatus)
    {
        if(Dragged.JobColumnId == newStatus.Id && DraggedOver != null)
        {
            await HandleSwap(Dragged, DraggedOver);
            return;
        }

        var deleteFrom = Columns.First(x => x.Id == Dragged.JobColumnId);
        deleteFrom.JobItems.Remove(Dragged);
        this.Renumerate(deleteFrom);

        var index = DraggedOver == null ? newStatus.JobItems.Count : newStatus.JobItems.IndexOf(DraggedOver);
        newStatus.JobItems.Insert(index, Dragged);
        Dragged.JobColumnId = newStatus.Id;
        this.Renumerate(newStatus);

        if(deleteFrom != newStatus)
        {
            await this.service.UpdateJobColumn(deleteFrom);
        }

        await service.UpdateJobColumn(newStatus);
        this.StateHasChanged();

    }

    public void StateChanged()
    {
        this.StateHasChanged();
    }

    public async Task AddNewColumnJobAsync(string newColumn)
    {
        var column = new JobColumn
        {
            Name = newColumn,
            Place = this.Columns.Count,
            JobItems = new List<JobItem>()
        };

        column = await service.AddColumn(column);
        this.Columns.Add(column);

        base.StateHasChanged();
    }

    public async Task DeleteItem(JobItem item)
    {
        var column = Columns.FirstOrDefault(x => x.Id == item.JobColumnId);
        column.JobItems.Remove(item);
        this.Renumerate(column);

        await service.DeleteJobItem(item);
        await service.UpdateJobColumn(column);

        this.StateHasChanged();
    }

    public async Task DeleteColumn(JobColumn item)
    {
        if (item.JobItems.Any())
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? All of the tasks in the board will be deleted too");
            if (!confirmed)
            {
                return;
            }

            foreach (var it in item.JobItems.Select(x => x).ToList())
            {
                await service.DeleteJobItem(it);
            }
        }


        Columns.Remove(item);

        await service.DeleteJobColumn(item);

        this.StateHasChanged();
    }
}